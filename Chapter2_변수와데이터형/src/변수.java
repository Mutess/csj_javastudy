/*
 * 	1장 자바의 특징
 * -------------
 * 1) 특징
 * 	= 운영체제의 독립적 (모든 운영체제의 호환성이 좋음)
 * 		ex)윈도우에서 작성 => 리눅스로 사용가능
 * 		c/c++ => 소스작성 ==> 컴파일 (컴퓨터가 인식하는 언어로 변경)
 * 							.obj (운영체제마다 다름)
 * 		java => 소스작성 ==> 컴파일
 * 						   .class 운영체제마다 동일한 파일을 생성(호환성이 뛰어남)
 * 		**java 실행과정
 * 		a.java =====> A.class =======> 실행화면 출력
 * 			컴파일 (javac) 바이트(2진파일) 인터프리터(Java)
 * 			두번의 검증을 거친다 (보안이 뛰어남)
 * 		= 객체지향 프로그램 (재사용이 편리한 상태) => 유지보수 (대규모 프로그램)
 * 		  지사용 : 수정, 추가, 데이터 보호(캡슐화)가 가능한 것 
 * 				----------- 오버로딩/오버라이딩
 * 				포함 (수정할 내용이 없을때) => has - a
 * 				상속 (수정할 내용이 있을때) => is - a
 * 		= 비교적 배우기 쉽다.
 * 		  C/C++에서 파생된 언어 = > 포인터(메모리 주소), 구조체, 다중 상속, 지원하는 API가 미약
 * 			=> Java => 강력한 API를 가지고 있음 (라이브러리가 강력, 필요한 기능이 이미 제작)
 * 				=> 조립식으로 코딩가능 (자바 공부는 직접 구현)
 * 		= 자동 메모리 관리 (가비지 컬렉션)
 * 		= 네트워크 / 분산 / 멀티쓰레드 기능을 가지고 있음
 * 
 * 		2. 소스 코딩 방법
 * 		   주석 : // => 번역이 되는 내용은 아님(프로그래머만 보는 상태)
 * 		   프르그램은 명령어(JVM) => ;
 * 		   대소문자 구분한다. a/A **  
 * 		   {}을 사용하는 법
 * 		   들여쓰기
 * 		   == 구성요소
 * 			1) 클래스명 : 첫글자가 대문자 ***
 * 			2) 변수 : 소문자로 시작 ***
 * 			3) 상수 : 전체가 대문자 ***
 * 			4) 메소드 : 소문자
 * 			5) 생성자 : 클래스명과 동일
 * 
 * 		공부하는 방식
 * 		1) 데이터 저장 방법 : 번수 / 상수
 * 		----------------메모리 저장 (메모리 크기 결정) => 기본형 (데이토형)
 * 		----------------사용자 정의 : 참조형(배열, 클래스)
 * 		2) 데이터 가공
 * 		연산자 / 제어문
 * 		----------------기본 문법
 * 		3) 관련된 데이터를 모아서 관리 : 배열
 * 		4) 관련된 명령어를 모아서 관리 : 메소드
 * 		5) 데이터 / 명령어를 동시에 관리 : 클래스
 * 		6) 객체 지향 프로그램
 * 		7) 프로그램이 비정상 종료를 방지 / 오류를 처리할 수 있게 제작(예외 처리)
 * 		================================================================ 자바기본
 * 		8) 자바에서 지원하는 라이브러리
 * 		
 * 		3. 자바의 구성
 * 		package : 한번만 사용 => 위치확인
 * 		import : 기존에 만들어진 클래스 불러오기 (여러개 사용 가능)
 * 		------------------------------------------------
 * 		ex)
 * 		class ClassName {
 * 			--------------
 * 			변수 설정
 * 			--------------
 * 			생성자
 * 			--------------
 * 			메소드
 * 			--------------
 * 			프로그램 시작점
 * 			public static void main(String[] args) {
 * 			기본 문법
 * 			}
 * 		}
 * 		반복 공부
 * 		1. 기본 형식
 * 		2. 활용(알고리즘)
 * 
 * 		*** 변수
 * 		=> 한개의 데이터를 저장하는 메모리 공간 (메모리주소에 별칭을 주면 그 값을 활용가능)
 * 		=> 사용법
 * 		   데이터형 변수명 = 값;
 * 		  ------
 * 		=> 변수명 식별자 : 변수 => 같은 이름을 사용할 수 없다.
 * 		1) 알파벳, 한글 시작한다. (알파벳은 대소문자를 구분한다.)
 * 			a/A
 * 		2) 숫자를 사용할 수 있다.(단, 앞에 사용 금지)
 * 		3) 특수문자 사용이 가능 ( _, $ )
 * 			a_b, _a... (임시변수, 단어가 2개인 경우)
 * 			file_name, fileName
 * 		4) 키워드는 사용 할 수 없다. (자바에서 사용하는 단어를 키워드라고 함)
 * 		 구분법 => 빨간글씨로 표시
 * 		5) 길이는 제한이 없음 => 하지만 대략 (3~7) 이정도 길이가 좋음
 * 		   변수는 의미가 있어야 함 (id, name, address, phone...)
 * 		=======================================================
 * 		과일 가게에는 사과가 5개 배가 10개, 바나나 7개, 딸기 1개 => 변수가 4개
 * 	저장시에는 반드시 앞에 메모리 크기 지정
 * 	기본형 (자바에서 지원)
 * 	참조형 (사용자 정의) => 배열/클래스
 * ------------------------------
 * 기본형
 * ----
 * 	정수 저장 방법
 * 		1byte = byte a = 10; (1byte 메모리에 10을 저장해 달라) // 네트워크 전송이나, 파일 읽기...
 * 		2byte = short // C언어와 호환하기 위해 사용
 * 		4byte = int // 평상시에 시용하는 모든 정수(default)가 가장 빠름 (메모리가 4byte씩 나눠줘 있기에 최적화가 됨)
 * 			System.out.println(100)
 * 		8byte = long
 * 	실수 저장 방법
 * 		4byte = float ==> 소수점 6자리 저장 가능
 * 		8byte = double (default) ==> 소수점 15자리 저장 가능
 * 		ex) 10.5는 double이지만 d는 생략이 가능 10.5F는 float
 *  문자 저장 방법
 *  	2byte => char
 *  		=> 1byte (싱글바이트 => ASC) / 2byte(멀티바이트 => UniCode)
 *  		*** 한글이나 중국어, 독일어, 일본어... 한글자당 2byte씩
 *  	byte = bit(8) => 256글자
 *  	byte = bit(16) => 65535문자 사용 가능
 *  	UTF-8
 *  	각 문자마다 번호
 *  논리 저장 방법
 *  	true/false만 저장 => 1byte => boolean
 * 	자동 지정(jdk 10버전 이상)
 * 		var (variable)
 * 		var a = 10 => a : int
 * 		var b = 10.5 => b : double
 * 		var c = 'A' => c : char
 * 
 * 
 * 		저장이 가능한 데이터
 * 		byte => -128~127
 * 		1byte
 * 			128		64		32		16		8		4		2		1(0)
 * 		-----------------------------------------------------------------
 * 			0	|	1	|	1	|	1	|	1	|	1	|	1	|	1	|
 * 		-----------------------------------------------------------------
 * 					64+32+16+8+4+2+1 = 127
 * 		부호비트 (0 : 양수, 1 : 음수)
 * 
 * 		2byte => -32768~32767 => short
 * 
 * 		4byte => -21억 4천 ~ 21억 4천 => int
 * 
 * 		8byte => long
 * 
 * 		변수
 * 		데이터형 변수명 = 값
 * 		---------------
 * 
 * 		값을 부여 크기에 맞게 지정한다.
 * 		int a = 10.5, ==> 오류
 * 		---     ----
 * 		 4		 8
 * 
 * 		long = 1000000000000000000가 오류가 나는 이유는 값이 int로 기본값이기 때문에 숫자 뒤에 L를 넣어줘야함 ex) 1000000000000000000L;
 * 
 * 		데이터형 크기
 * 		byte < short < int < long < float < double  이말은 변수의 데이터형이 작으면 안됨, 커야됨, (오른쪽이 크면 오류남)
 * 			   char
 */
public class 변수 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int Ab;
//		Ab = 0;
//		
//		System.out.println(Ab);
		
//		long a = (long)10.5; //30page 내용, 형 변환 (강제로 long 형식으로 바꿈)
//		
//		int i = 123456;
//		double j = 123456.78;
//		int c = (int)((j-i) * 100);
//		System.out.println(c);
		
		//모든 숫자는  기본값인 int로 인식, 소수점이 있으면 기본값인 double로 인식
		byte byte_value = 127; //-127~128 = 오른쪽에서 왼쪽이동 //*****
		//127을 byte_value라는 공간에 첨부해라
		short short_value = 32767; //-32768~32767 //*****
		int int_value = 2140000000; //*****
		long long_value = 999999999999999999L;
		// int / long의 구분은 1(L)
		char char_value = '홍';
		float float_value = 10.5F; //*****
		double double_value = 10.5; //초기값 //*****
		boolean boolean_value = true; //*****
		
		//모든 정수는 int로 인식
		//모든 실수는 double로 인식
		//지역변수는 반드시 초기값을 부여한 후에 사용이 가능
		/*
		 * 변수
		 * = 멤버변수
		 * = 공유변수
		 * ---------------프로그램 종료시까지 메모리유지
		 * 				  => 자동 초기화
		 * = 지역변수
		 * ---------------블록이 종료되면 사라지는 변수
		 * 				  => 직접 초기화
		 * 
		 * class A { 
		 * 	--------
		 *  멤버변수 / 공유변수
		 *  --------
		 *  public static void main(String[] args) {
		 *  	------------------------
		 *  		지역변수 main() {} 안에서만 사용이 가능 => 반드시 초기화를 시켜줘야 함
 		 *  	------------------------
		 *  }
		 * }
		 * 변수 => 변경이 가능 
		 * 상수 => 변경이 불가능 (값이 고정됨)
		 * 
		 * 변수 => 데이터형 변수명 = 값  int = 10;
		 * 상수 => 데이터형 변수명 = 값  final int b = 20;
		 * 						   ----- ***
		 */
	int kor = 80;
	kor = 90;
	kor = 100; //변수여서 계속 값을 바꿔도 값이 바뀜
	kor = 300;
	
	final int SCORE = 70; //상수는 대문자로 작성
	// = 대입, 활당 , == 같다, != 같지 않다.  
	// JavaScript (=, ===, !==)
	// 오라클 (=)
	/*
	 * 변수
	 * 선언 
	 * 초기화
	 * 
	 * 선언
	 * int a;
	 * a = 10;
	 * 
	 * => 선언과 동시에 초기화
	 * 		int a = 10;
	 * 
	 * => int a;
	 * 	  int b;
	 *    int c;
	 *    => int a, b, c;
	 *    
	 *    int a = 10;
	 *    int b = 20;
	 *    int c = 30;
	 *    ==> int a = 10, b = 20, c = 30;
	 *    
	 *    int a = 10;
	 *    long b = 20;
	 *    double c = 10.5;
	 *    => 이건 묶어서 못함
	 *    
	 */
	//자동 지정 변수
//	var a = 100; // int a=100; 이건 되는데 a = 10.7은 안됨
//	var b = 10.5; // double b = 10.5
//	var c = 'A'; // char c ='A'  char는 int랑 호환
//	c = 97;
//	
//	System.out.println(c);
	//score = 100;
	
	
	//값교환
	int a = 10;
	int b = 20;
	int temp = a; // (임시변수)
	a=b; // 교환이 안되서 임시변수 선언
	
	b=temp;
	
	System.out.println("a="+a);
	System.out.println("b="+b);
	b=a;
	
	}

}
