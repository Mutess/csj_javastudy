/*
 *   필요한 데이터를 모아서 관리
 *    = 변수 (따로 저장)
 *      인스턴스 변수  (여러개)
 *    = 공유하는 변수 ex) 사이트의 로고
 *      정적변수 (static) (하나를 가지고 다들 공유하는 것)
 *    
 *   기능 처리
 *    메소드
 *    저장방법 : 클래스 (new), 생성자
 *    
 *    ex)
 *    class card
 *    {
 *    	int num;
 *    
 *      String 무늬
 *      static int width
 *      static int height	//static이 들어가면 다른 card들도 같은 값을 사용한다.
 *    }
 *    ==> 클래스는 1개만 설계 => 필요할 때 마다 따로 저장
 *    
 *    Card c1 = new Card()
 *    Card c2 = new Card()
 *    Card c3 = new Card() //클래스 사용법  
 *    
 *    그래서 c1에는 num, 무늬라는 변수가 번지가 각각 따로 들어감
 *    
 *    그래서 
 *    c1는 100번지라고 하면 
 *    c2는 200번지 
 *    c3는 300번지에 저장됨
 *    
 *    접근할때 .(주소접근연산자)를 사용해서 접근 ex) c1.num
 *    
 *    static(공유변수 만들때 사용)이 들어간 width, height는 모든 번지에서 접근이 가능
 *    
 *    1. 클래스의 구성요소
 *    class ClassName
 *    {
 *    ------------------
 *    1) 변수 설정
 *    ------------------
 *    3) 생성자 설정 (필요시에만 사용 => 생성하지 않을경우 컴파일러가 자동으로 생성시킴)
 *    ------------------
 *    2) 메소드 설정
 *    ------------------
 *    
 *    ------------------
 *    }
 *    
 *    1) 변수 종류
 *       -------
 *       클래스 영역에 선언하는 변수 (멤버변수) ==> 저장영역 == heap
 *       	= 인스턴스 변수 new를 사용할 때 저장되는 변수 (new설정에 따라 따로 저장)
 *       		= 사용법 : 
 *       			클래스 객체명.변수명
 *       			Card c1 = new Card()
 *       				 -- 변수 여러개가 있기때문에 (. => 주소연산자로 접근)
 *       			c1.num = 10;
 *       
 *       	= 정적 변수 : 한개의 공간에 저장되는 변수
 *       		= 사용법 : 
 *       			Card c1 = new Card()
 *       			c1.num
 *       			Card.num *****
 *       	---------------- 프로그램 종료시까지 사용 변수
 *       메소드 영역에 선언하는 변수 (지역변수) ==> 저장영역 == stack 
 *       	---------------- 메소드가 종료되면 사라지는 변수
 *       	1) 메소드 영역에 선언되는 변수
 *       		void aaa(){
 *       	     	int a = 10;
 *              } 
 *          2) 매개변수
 *          	void aaa (int a) {
 *              
 *              }
 *           
 *   자바 메모리 구조
 *   -------------------------------------------------------
 *   Method Area = method, static
 *   -------------------------------------------------------
 *   Stack : 메모리 자체에서 관리 (생성 / 소멸) => 블럭변수
 *   		 매개변수, 지역변수
 *   		 => 변수의 초기화가 안된다. (반드시 초기화를 한 다음에 사용)
 *   ------------------------------------------------------- => 여기까지는 메모리에서 자동으로 저장
 *   heap : 프로그래머 영역 (직접 메모리를 크기를 만들어서 저장)
 *   		자동 소멸이 안된다. => GC(System.GC())
 *   -------------------------------------------------------
 *   	heap, method area => 변수 저장시에 자동 초기화가 됨
 *   	class ClassName { ==> 자동 초기화 알아서 됨
 *   		int a;      => 0
 *   		doublae d;  => 0.0
 *   		boolean b;  => false
 *   		char c; 	=> '\u00000'
 *   		long l;		=> 0L
 *   		String ;	=> null
 *   					   **null은 참조타입 => 주소를 가지고 있지 않은 상태
 *   							ex) String s; ==> 이게 null값  String s ="";  ""==> 주소
 *   								int[] arr; ==> 이게 null값 [메모리 주소]가 나옴
 *   	} ==> 여기는 자동 초기화
 *   -------------------------------------------------------
 *            
 *            
 *  --------------------------------------------------------------------------------------------
 *   변수유형 		선언위치 							메모리 저장위치						사용범위
 *  --------------------------------------------------------------------------------------------
 *  인스턴스변수	클래스 블록						new : 새로운 저장공간을 만듬			클래스 전체
 *  			class ClassName					heap메모리에 저장
 *  			{
 *  				int a;
 *  			}
 *  --------------------------------------------------------------------------------------------
 *  정적변수		클래스 블록						컴파일시 자동 저장
 *  			class ClassName
 *  			{
 *  				static int a;
 *  				=> 많이 사용되는 변수는 아님
 *  			}
 *  --------------------------------------------------------------------------------------------
 *  지역변수		class ClassName {				메소드 호출시마다					메소드 안에서만 사용이 가능
 *  				void display() {
 *  					int a;
 *  				}			
 *  			}
 *  			반드시 초기화
 *  --------------------------------------------------------------------------------------------
 *  1) 메모리 저장
 *     메모리에 저장된 상태 : 인스턴스 (객체)
 *     설계 (어떤 데이터를 저장) ==> 메모리에 저장 ========================= 활용==============> 소멸 (메모리 해제)
 *     class ClassName {			ClassName c= new ClassName()	c.변수명			   c = null  gc()
 *     		String s;								 -----------	c.메소드명()
 *     		int a;									 	생성자
 *     }
 *     
 *     String s="";
 *     s.substring() // 글자 자르기
 *     s.trim()		 // 공백 제거
 *     
 *     Scanner scan = new Scanner(system.in)
 *     				  --- 
 *     scan.nextInt()
 *     
 *     *** 클래스는 한개에 대한 정보를 설계
 *     맞집 : 5000개
 *     ------------ 한개의 클래스 생성 후 new로 메모리 주소 저장공간을 각각 다르게 만들어서 남은 갯수 생성
 */
class Student {
	String name;
	int kor;
	int eng;
	int math;
}//생성자가 없는데 출력이 되는건 자동으로 생성자를 만들어줌 
public class 사용자정의_데이터형_1 {
	/*
	 * Student s1
	 * ------- name
	 * 	홍길동
	 * ------- kor
	 * 	90
	 * ------- eng
	 *  80
	 * ------- math
	 *  70
	 * --------
	 * 
	 * Student s2
	 * ------- name
	 * 	심청
	 * ------- kor
	 * 	90
	 * ------- eng
	 *  80
	 * ------- math
	 *  70
	 * --------
	 * 
	 * Student s3
	 * ------- name
	 * 	강감찬
	 * ------- kor
	 * 	90
	 * ------- eng
	 *  80
	 * ------- math
	 *  70
	 * --------
	 */

	public static void main(String[] args) {
		Student s1 = new Student();
		// int  a  =  10; 랑 같은데  new는 주소값을 가져오는 것 
		System.out.println("s1=" +s1); //다른 메모리 주소를 가짐
		s1.name = "홍길동";
		s1.kor = 90;
		s1.eng = 80;
		s1.math = 78;
		// s1 = name, kor,eng, math
		Student s2 = new Student();
		// s2 = name, kor,eng, math
		System.out.println("s2=" +s2); //다른 메모리 주소를 가짐
		s2.name = "심청이";
		s2.kor = 80;
		s2.eng = 70;
		s2.math = 68;
		Student s3 = new Student();
		// s3 = name, kor,eng, math
		System.out.println("s3=" +s3); //다른 메모리 주소를 가짐
		s3.name = "강감찬";
		s3.kor = 98;
		s3.eng = 79;
		s3.math = 97;
		
		System.out.println(s1.name+" "+s1.kor+" "+s1.eng+" "+s1.math+" ");
		System.out.println(s2.name+" "+s2.kor+" "+s2.eng+" "+s2.math+" ");
		System.out.println(s3.name+" "+s3.kor+" "+s3.eng+" "+s3.math+" ");

	}

}
