package com.sist.main;
/*
 *   자바 클래스의 구성요소 => 객체지향의 특성 (접근지정어, 캡슐화, 재사용, 수정, 추가)
 *   ----------------     public / protected / default / private
 *   					  1) 변수 2) 메소드  3) 생성자
 *   					  1) 캡슐화 : 데이터 보호 => 모든 변수는 private
 *   					  2) 재사용 : 변경해서 사용, 있는 그대로
 *   								상속 (is-a)   포함(has-a)
 *   					  3) 수정 : 오버라이딩, 추가 : 오버로딩 
 *   class ClassName {
 *   -------------------------
 *    변수 
 *     1) 멤버변수(인스턴스변스 => new을 사용해 메모리에 저장할때 따로 저장되는 변수)
 *     	  형식) [접근지정어] 데이터형 변수명 = 값 (디폴트값)
 *            int a;
 *            int a = 10; //명시적 초기화
 *            
 *            클래스안에서 
 *            => int a; 
 *            	 a = 10;(이걸 구현이라고 함) 그래서 클래스안에서 구현하면 오류남  ==> 변수의 초기화 (생성자를 사용)
 *            => 생성시점 : new를 이용해서 메모리 공간을 만들어줬을 때
 *            => 소멸시점 : 객체=null이거나 사용하지 않는 경우
 *            			  -------------- 가비지 컬렉션 (메모리 회수)
 *            => 가장 많이 사용되는 변수 (여러개를 저장)
 *            => 사용하는 방법 {
 *               	int age; //0
 *               	String name; // null
 *               }
 *               A a = new A(); => age, name
 *               	   ---
 *                 -- 객체, 인스턴스(접근할때 객체명(변수명으로 접근해야함))(메모리에 저장된 상태)
 *                 => a.age
 *                 => a.name
 *               A b = new A(); => age, name
 *               	   ---
 *                 => b.age
 *                 => b.name  //new를 사용해서 메모리 생성  //a랑 b랑 다른 메모리 주소임
 *           ===================> class는 한개만 설계 ==> 저장을 할때 new을 이용해서 여러개의 객체를 생성
 *          -a-
 *    주소값  100 ==> 100 ----------
 *          --- 	      ------ age					
 *           				25
 *           		       ---- name
 *           				홍길동
 *           		      ------
 *           		     ----------
 *   --------------------------------------------------------------------------
 *           -b-
 *           200 ==> 200 ----------
 *           ---           ------ age
 *           				20
 *           		       ---- name
 *           				심청이
 *           		      ------
 *           		     ----------
 *   --------------------------------------------------------------------------
 *   b=a => 저장된 데이터관리 위치가 변경이 될 수 있다. (데이터 손실)
 *   --- 메모리 주소의 복구가 어렵다.
 *   		-a-
 *    *    주소값  100 ==> 100 ----------
 *          --- 	      ------ age					
 *           				25
 *           		       ---- name
 *           				홍길동
 *           		      ------
 *           		     ----------
 *           
 *           -b-
 *           100 ==>(X) 200 ----------  (가비지 컬랙션 대상이 됌) (위험하기에 함부로 대입하면 안됨)
 *           ---           ------ age
 *           				20
 *           		       ---- name
 *           				심청이
 *           		      ------
 *           		     ----------
 *     2) 정적변수 (클래스변수, 공유변수) => 한개의 공간만 생성
 *     	  => 공유변수 : 오라클
 *     	  형식) [접근 지정어] static 데이터형 변수명 = 값(디폴트값)
 *     		   int => 0
 *     		   double => 0.0
 *             boolean => false
 *             String,배열, 클래스 => null(주소가 저장이 안된 상태)
 *        	   => 생성시점 : 컴파일러에 의해 자동으로 메모리 저장
 *             => new가 없어도 사용이 가능함
 *   -------------------------
 *    생성자 :
 *      1) 객체가 생성될때 호출 메소드
 *         A a = new A()
 *         			 --- 생성자
 *      2) 특징			  ↑
 *         = 클래스명과 동일함 ↑
 *         = 리턴타입이 없다
 *         = 생성자는 하나라도 있으면 자동으로 추가 안함
 *         = 생성자가 없는 경우에 추가(매개변수가 없는 생성자가 추가가 됨)
 *         						 ----------------
 *         							기본 생성자
 *         = 멤버변수의 초기화
 *         = 생성자는 여러개 사용이 가능 (한개의 클래스안에서)
 *         = 데이터베이스 연결, 네트워크 연결, 윈도우...
 *         = 자동추가
 *         	 -----
 *         	 import : java.lang.*;를 생략하고 들어옴
 *         			  ---------- String, Math, System...
 *         	 class A extends Object
 *         			 -------------- 
 *         	 생성자 : 기본생성자()
 *         	 return : void
 *         class A {
 *         		a(){} *** : 생성자
 *         		void A(){} : 일반 메소드
 *         		A(int a){}*** : 생성자 오버로딩
 *         		A(int a, int b){}*** : 생성자
 *         }
 *         ==> 앞에 리턴타입이 없으면 생성자
 *         
 *     3) 역할
 *     	  = 시작과 동시에 처리
 *     		예) 자동 로그인, 오라클 연결, 서버 연결등과 같은 상황일때 사용
 *     	  = 멤버변수의 초기화
 *     		class A
 *     		{
 *     			int a;
 *              A() {
 *              	//파일읽기, 크롤링
 *              	init()
 *              }      
 *          }
 *          
 *          --------------
 *          class A {
 *          	int a = 10;
 *          }
 *          = 필요시마다 사용한다. (생략할 수 있다.)
 *          				   ---- 컴파일러에 의해 자동으로 추가
 *   -------------------------
 *    메소드 : 
 *    	1) 역할 => 다른 클래스 클래스와 통신(연결)
 *    	2) 수정 , 추가 (오버라이딩, 오버로딩)
 *    	3) 반복제거
 *    	4) 구조적인 프로그램 (단락을 나눠서 처리) => 오류, 수정
 *    	5) 메소드는 호출시마다 처음부터 끝까지
 *    	6) 구성 요소
 *    	   - 결과값 (리턴타입)
 *    		  => 리턴 타입으로 사용
 *    			 기본형
 *    			 int, double, char, boolean, long...
 *    			 배열 : 데이터형 여러개
 *    			 int[] , double[]...
 *    			 클래스 : 다른 데이터형 여러개
 *    			 String , 사용자 정의
 *    			 => 클래스 => 배열로 사용이 가능(데이터형)
 *    			 => 기본형 (자바에서 지원 < 지원하지 않는 것) => 지원하지 않는 것이 더 많음
 *    				프로그래머가 만들어서 처리 => 클래스
 *    			 => 클래스의 첫번째 기능 => 사용자 정의 데이터형 == 데이터형 (int, double, char ...) 
 *    								   그래서 형변환, 대입이 가능 (기본형과 동일하게 사용이 가능)(고정관념을 깨자!)
 *    	   
 *    	   - 메소드명 : 식별자(소문자시작, 숫자는 문자뒤... 등) => 변수, 클래스, 인터페이스, 메소드
 *    				  => 변수, 메소드는 소문자
 *    				  => 클래스, 인터페이스 대문자
 *    				  => 문자 길이는 상관없음 (하지만 불어오기 쉽게 3~10글 정도 사용) ==> 7글자 적당
 *    				  class A, class B, class C
 *    			       이거보단
 *    				  class Notice , Board, Reply
 *    				  ==> 한글은 가급적 사용하지 않는다.
 *    
 *    	   - 매개변수 (사용자 요청)
 *    ***  - 사용자의 요청값을 받아서 요청 처리 결과를 도출
 *    ***  - 최소화 시킨다. (3개이상이면 => 배열(같은 데이터형),클래스(다른 데이터형))
 *    		 예) 정수 10개를 보내주고 정렬 후 값을 달라
 *    		 (int a, int b....)
 *    		 (int[] arr)
 *    		 
 *    		 예외
 *    		 회원가입
 *    		 (String id, String pwd, String name, int age...)
 *    		 이거보단 
 *    		 class (Member m)
 *    
 *    메소드 유형
 *    => 리턴타입 (없거나 한개만 존재) => 여러개 (배열)
 *    => 매개변수 (없거나 한개이상)
 *    -----------------
 *     리턴타입    매개변수
 *    -----------------
 *    	 O		   O  ==> 가장 많이 사용
 *    	 자바자체에서 처리 / 자바 => 데이터를 브라우저로 보냄
 *    -----------------
 *    	 O		   X
 *    -----------------
 *    	 X		   O
 *    -----------------
 *       X		   X  
 *    -----------------
 * -------------------------
 * 	  메소드 형식
 * 	  [접근지정어][옵션] 리턴타입 메소드명(매개변수...) { 선언부
 * 					 ------ 결과값  ------- 요청값
 *    		옵션 : static, abstract, final
 *    		구현부
 *    		연산처리 / 제어문
 *    		return 값;  ==> void일 경우 생략이 가능 // 다른 데이터형이면 무조건 return값 필요
 *    }
 *    
 *    
 *    
 *    
 *   -------------------------
 *   
 *   class A {
 *   	int a;
 *   	static int b;
 *   }
 *   A aa = new A()
 *   A bb = new A()
 *   
 *   
 *   
 *   
 *   method Area =>
 *   static
 *   static int a
 *   --------------------------
 *   stack => 
 *   지역변수, 매개변수
 *   메모리 자체 관리
 *   => 생성시점
 *   	메소드 호출
 *   => 소멸시점
 *   	메소드 호출 종료
 *   	{}이 종료하면 종료 
 *   --------------------------
 *   heap => 
 *   인스턴스/배열, 
 *   관리자 : 프로그래머 => GC ==> 프로그램 종료
 *   
 *   ------------------------------------
 *   
 *   
 *   }
 */
class A {
	//A(){} //매개변수가 없는 생성자가 추가가 됨
	//
}
public class 생성자_1 {
	//자동으로 생성자가 추가되어 있음.
	//생성자_1() {} 이렇게
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		생성자_1 a = new 생성자_1();
		return; //없으면 컴파일러가 자동으로 추가
//		System.out.println(a.toString());
	}

}
